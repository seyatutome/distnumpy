#!/usr/bin/python
#Test and demonstration of DistNumPy.
import sys
import os
import getopt
import subprocess

OUTPUT_PARSER = "dndoutput.py"
TmpDir = os.path.join("/","tmp")
T1 = os.path.join(TmpDir, "dndnumpy_t1.csv")
T2 = os.path.join(TmpDir, "dndnumpy_t2.csv")

if __name__ == "__main__":
    blocking = ""
    latencyhiding = ""
    gnuplot_src = os.path.join(TmpDir, "dndnumpy_gnuplot.src")
    output = ""

    try:
        opts, args = getopt.getopt(sys.argv[1:],"b:l:o:",["blocking=", "latency-hiding=", "output="])
    except getopt.GetoptError, err:
        print str(err)
        sys.exit(2)
    for o, a in opts:
        if o in ("-b", "--blocking"):
            blocking = a
        elif o in ("-l", "--latency-hiding"):
            latencyhiding = a
        elif o in ("-o", "--output"):
            output = a
        else:
            assert False, "unhandled option"

    assert blocking != "", "the blocking directory not specified"
    assert latencyhiding != "", "the latency-hiding directory is not specified"

    # Write the csv files generated by the OUTPUT_PARSER.
    f = open(T1, "w")
    subprocess.Popen([OUTPUT_PARSER, blocking], stdout=f).wait()
    f.close()
    f = open(T2, "w")
    subprocess.Popen([OUTPUT_PARSER, latencyhiding], stdout=f).wait()
    f.close()

    # Write the GnuPlot source file.
    gnuplot = """### Generated by dndgraph.py ###
    reset
    set encoding iso_8859_1
    set title "Strong scaling of Test."
    set xlabel 'No. of CPU-cores'
    set ylabel 'Speedup'
    set y2label 'Relative blocking time'
    #set xrange [1:128]
    #set yrange [1:40]
    set y2range [0:100]
    set key left top
    set grid ytic
    set ytics (1,2,4,8,16,32,64,128)
    set datafile separator ";"
    set ytics nomirror
    set y2tics
    set log y
    set style data histograms
    set style fill pattern 1.0 border
    """
    gnuplot += "plot '%s' using 3 axis x1y2 title 'Blocking', '%s' using 3 axis x1y2 title 'Latency-Hiding'\n"%(T1,T2)
    gnuplot += "set terminal postscript \n set output  '%s' \n"%output
    gnuplot += "replot '%s' using 2:xticlabels(1) axis x1y1 with linespoints lw 4 title 'Blocking',"%T1
    gnuplot += "'%s' using 2:xticlabels(1) axis x1y1 with linespoints lw 4 title 'Latency-Hiding'\n"%T2

    if output == "":# we just return the gnuplot source output.
        print gnuplot
    else:
        f = open(gnuplot_src, "w")
        f.write(gnuplot)
        f.close()
        subprocess.call(["gnuplot",gnuplot_src])




